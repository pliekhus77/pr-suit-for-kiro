name: Build and Test

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    name: Build Extension
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Compile TypeScript
        run: npm run compile
        
      - name: Run ESLint
        id: lint
        run: npm run lint
        continue-on-error: false
        
      - name: Generate lint summary
        if: always()
        run: |
          echo "### Linting Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.lint.outcome }}" == "success" ]; then
            echo "✅ No linting errors found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Linting errors detected - build failed" >> $GITHUB_STEP_SUMMARY
            echo "Please fix linting errors before proceeding" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Run tests with coverage
        id: test
        run: npm test -- --coverage --coverageReporters=text --coverageReporters=text-summary --coverageReporters=json-summary --coverageReporters=lcov --coverageReporters=html --coverageReporters=cobertura
        continue-on-error: false
        
      - name: Generate test summary
        if: always()
        run: |
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.test.outcome }}" == "success" ]; then
            echo "✅ All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Tests failed - build failed" >> $GITHUB_STEP_SUMMARY
            echo "Please fix failing tests before proceeding" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Check coverage threshold
        id: coverage
        if: always() && steps.test.outcome == 'success'
        run: |
          # Extract coverage percentages from coverage-summary.json
          if [ -f "coverage/coverage-summary.json" ]; then
            LINES=$(jq '.total.lines.pct' coverage/coverage-summary.json)
            STATEMENTS=$(jq '.total.statements.pct' coverage/coverage-summary.json)
            FUNCTIONS=$(jq '.total.functions.pct' coverage/coverage-summary.json)
            BRANCHES=$(jq '.total.branches.pct' coverage/coverage-summary.json)
            
            echo "### Code Coverage" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Coverage | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|--------|" >> $GITHUB_STEP_SUMMARY
            
            # Check each metric against 80% threshold
            THRESHOLD=80
            FAILED=0
            
            if (( $(echo "$LINES >= $THRESHOLD" | bc -l) )); then
              echo "| Lines | ${LINES}% | ✅ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Lines | ${LINES}% | ❌ |" >> $GITHUB_STEP_SUMMARY
              FAILED=1
            fi
            
            if (( $(echo "$STATEMENTS >= $THRESHOLD" | bc -l) )); then
              echo "| Statements | ${STATEMENTS}% | ✅ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Statements | ${STATEMENTS}% | ❌ |" >> $GITHUB_STEP_SUMMARY
              FAILED=1
            fi
            
            if (( $(echo "$FUNCTIONS >= $THRESHOLD" | bc -l) )); then
              echo "| Functions | ${FUNCTIONS}% | ✅ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Functions | ${FUNCTIONS}% | ❌ |" >> $GITHUB_STEP_SUMMARY
              FAILED=1
            fi
            
            if (( $(echo "$BRANCHES >= $THRESHOLD" | bc -l) )); then
              echo "| Branches | ${BRANCHES}% | ✅ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Branches | ${BRANCHES}% | ❌ |" >> $GITHUB_STEP_SUMMARY
              FAILED=1
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ $FAILED -eq 1 ]; then
              echo "❌ **Coverage threshold not met** - Minimum 80% required for all metrics" >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "✅ **All coverage thresholds met** - Minimum 80% achieved" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Coverage report not found" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
      - name: Upload test results
        if: always() && steps.test.outcome != 'skipped'
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/coverage-summary.json
            coverage/cobertura-coverage.xml
            coverage/lcov.info
          retention-days: 30
          if-no-files-found: warn
          
      - name: Upload coverage reports
        if: always() && steps.test.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
            !coverage/**/*.js
          retention-days: 30
          
      - name: Generate coverage summary
        if: always()
        run: |
          if [ "${{ steps.coverage.outcome }}" == "success" ]; then
            echo "✅ Code coverage validation passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.coverage.outcome }}" == "failure" ]; then
            echo "❌ Code coverage below 80% threshold" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Generate build status summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Build Status Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Compilation status
          if [ "${{ steps.lint.outcome }}" == "success" ]; then
            echo "| TypeScript Compilation | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| TypeScript Compilation | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Linting status
          if [ "${{ steps.lint.outcome }}" == "success" ]; then
            echo "| ESLint | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| ESLint | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test status
          if [ "${{ steps.test.outcome }}" == "success" ]; then
            echo "| Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.test.outcome }}" == "failure" ]; then
            echo "| Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Unit Tests | ⚠️ Skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Coverage status
          if [ "${{ steps.coverage.outcome }}" == "success" ]; then
            echo "| Code Coverage (≥80%) | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.coverage.outcome }}" == "failure" ]; then
            echo "| Code Coverage (≥80%) | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Code Coverage (≥80%) | ⚠️ Skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall build status
          if [ "${{ job.status }}" == "success" ]; then
            echo "### ✅ Build Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All quality checks passed. The build is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "One or more quality checks failed. Please review the errors above and fix them before proceeding." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
