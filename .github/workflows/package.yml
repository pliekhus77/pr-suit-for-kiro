name: Package Extension

# Trigger on version tag pushes
on:
  push:
    tags:
      - 'v*.*.*'

# Ensure only one package workflow runs at a time
concurrency:
  group: package-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate-tag:
    name: Validate Tag Format
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is-valid: ${{ steps.validate.outputs.is-valid }}
    
    steps:
      - name: Extract version from tag
        id: extract
        run: |
          TAG_NAME="${{ github.ref_name }}"
          VERSION="${TAG_NAME#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
      
      - name: Validate semantic version format
        id: validate
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          
          # Regex for semantic versioning (MAJOR.MINOR.PATCH with optional pre-release and build metadata)
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "‚úÖ Valid semantic version: $VERSION"
            echo "is-valid=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Invalid semantic version format: $VERSION"
            echo "Expected format: MAJOR.MINOR.PATCH (e.g., 1.2.3)"
            echo "is-valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Generate validation summary
        if: always()
        run: |
          echo "## üè∑Ô∏è Tag Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.extract.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.validate.outputs.is-valid }}" == "true" ]; then
            echo "‚úÖ **Status:** Valid semantic version" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status:** Invalid semantic version format" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please use semantic versioning format: MAJOR.MINOR.PATCH" >> $GITHUB_STEP_SUMMARY
          fi

  package:
    name: Build and Package VSIX
    runs-on: ubuntu-latest
    needs: validate-tag
    
    if: needs.validate-tag.outputs.is-valid == 'true'
    
    steps:
      - name: Checkout tagged commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install production dependencies
        run: npm ci --production
      
      - name: Install dev dependencies for build
        run: npm install --save-dev typescript @types/node @types/vscode
      
      - name: Compile TypeScript (production mode)
        run: npm run compile
        env:
          NODE_ENV: production
      
      - name: Install vsce
        run: npm install -g @vscode/vsce
      
      - name: Package extension
        id: package
        run: |
          VERSION="${{ needs.validate-tag.outputs.version }}"
          echo "Packaging extension version $VERSION..."
          
          vsce package --out "pragmatic-rhino-suit-${VERSION}.vsix"
          
          VSIX_FILE="pragmatic-rhino-suit-${VERSION}.vsix"
          echo "vsix-file=$VSIX_FILE" >> $GITHUB_OUTPUT
          echo "‚úÖ VSIX created: $VSIX_FILE"
      
      - name: Verify VSIX file exists
        run: |
          VSIX_FILE="${{ steps.package.outputs.vsix-file }}"
          
          if [ ! -f "$VSIX_FILE" ]; then
            echo "‚ùå VSIX file not found: $VSIX_FILE"
            exit 1
          fi
          
          FILE_SIZE=$(stat -f%z "$VSIX_FILE" 2>/dev/null || stat -c%s "$VSIX_FILE")
          echo "‚úÖ VSIX file exists: $VSIX_FILE ($FILE_SIZE bytes)"
      
      - name: Validate VSIX package
        run: |
          VSIX_FILE="${{ steps.package.outputs.vsix-file }}"
          VERSION="${{ needs.validate-tag.outputs.version }}"
          
          echo "üîç Validating VSIX package..."
          node scripts/validate-vsix.js "$VSIX_FILE" "$VERSION"
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ VSIX validation passed"
          else
            echo "‚ùå VSIX validation failed"
            exit 1
          fi
      
      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: vsix-package-${{ needs.validate-tag.outputs.version }}
          path: ${{ steps.package.outputs.vsix-file }}
          retention-days: 90
          if-no-files-found: error
          compression-level: 6
        env:
          # Add metadata as environment variables for tracking
          ARTIFACT_VERSION: ${{ needs.validate-tag.outputs.version }}
          ARTIFACT_TAG: ${{ github.ref_name }}
          ARTIFACT_COMMIT: ${{ github.sha }}
          ARTIFACT_RUN_ID: ${{ github.run_id }}
          ARTIFACT_RUN_NUMBER: ${{ github.run_number }}
      
      - name: Generate package summary
        if: always()
        run: |
          echo "## üì¶ Package Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate-tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "${{ steps.package.outputs.vsix-file }}" ]; then
            FILE_SIZE=$(stat -f%z "${{ steps.package.outputs.vsix-file }}" 2>/dev/null || stat -c%s "${{ steps.package.outputs.vsix-file }}")
            FILE_SIZE_MB=$(echo "scale=2; $FILE_SIZE / 1024 / 1024" | bc)
            
            echo "**VSIX File:** ${{ steps.package.outputs.vsix-file }}" >> $GITHUB_STEP_SUMMARY
            echo "**File Size:** ${FILE_SIZE_MB} MB" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ **Status:** Package created and validated successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üì§ Artifact Details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Artifact Name:** vsix-package-${{ needs.validate-tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Retention Period:** 90 days" >> $GITHUB_STEP_SUMMARY
            echo "- **Validation:** Passed (structure, version, file size)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The VSIX file has been uploaded as an artifact and is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå **Status:** Package creation failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
      
      - name: Send failure notification
        if: failure()
        run: |
          VERSION="${{ needs.validate-tag.outputs.version }}"
          TAG_NAME="${{ github.ref_name }}"
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          echo "üì¢ Sending package workflow failure notification..."
          echo ""
          echo "‚ùå Package Workflow Failed!"
          echo "Version: $VERSION"
          echo "Tag: $TAG_NAME"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: @${{ github.actor }}"
          echo "Workflow: $WORKFLOW_URL"
          echo ""
          echo "The extension packaging workflow has failed."
          echo ""
          echo "Common failure reasons:"
          echo "1. Invalid tag format (must be vX.Y.Z)"
          echo "2. TypeScript compilation errors"
          echo "3. vsce package command failures"
          echo "4. VSIX validation failures"
          echo "5. Missing or invalid dependencies"
          echo ""
          echo "Next steps:"
          echo "1. Review the failed steps above for specific error messages"
          echo "2. Verify the tag format is correct (vX.Y.Z)"
          echo "3. Check that the code compiles successfully"
          echo "4. Ensure package.json version matches the tag"
          echo "5. Fix issues and create a new tag if needed"
