name: Continuous Integration

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check TypeScript compilation
      run: npm run compile

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:coverage:ci
      
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.node-version }}
        path: coverage/
        retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run integration tests
      run: npm run test:integration
      continue-on-error: true
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: out/test/
        retention-days: 7

  bdd-tests:
    name: BDD Acceptance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npm run playwright:install
      
    - name: Run BDD tests
      run: npm run test:bdd:ci
      continue-on-error: true
      
    - name: Upload BDD test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bdd-test-results
        path: tests/bdd/reports/
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Run security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build:
    name: Build Extension
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, bdd-tests, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: npm run package
      
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: extension-build
        path: dist/
        retention-days: 7

  quality-gate:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, bdd-tests, security-scan, build]
    if: always()
    
    steps:
    - name: Check quality gate status
      run: |
        echo "Quality Gate Results:"
        echo "- Lint: ${{ needs.lint.result }}"
        echo "- Unit Tests: ${{ needs.unit-tests.result }}"
        echo "- Integration Tests: ${{ needs.integration-tests.result }}"
        echo "- BDD Tests: ${{ needs.bdd-tests.result }}"
        echo "- Security Scan: ${{ needs.security-scan.result }}"
        echo "- Build: ${{ needs.build.result }}"
        
        if [ "${{ needs.lint.result }}" != "success" ] || [ "${{ needs.unit-tests.result }}" != "success" ]; then
          echo "❌ Quality gate failed: Critical checks did not pass"
          exit 1
        fi
        
        echo "✅ Quality gate passed: All critical checks successful"
