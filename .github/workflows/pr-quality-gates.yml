name: PR Quality Gates

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop

jobs:
  quality-gates:
    name: PR Quality Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for version validation
        
      - name: Setup Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Compile TypeScript
        id: compile
        run: npm run compile
        continue-on-error: false
        
      - name: Run ESLint
        id: lint
        run: npm run lint
        continue-on-error: false
        
      - name: Run tests with coverage
        id: test
        run: npm test -- --coverage --coverageReporters=text --coverageReporters=text-summary --coverageReporters=json-summary --coverageReporters=lcov --coverageReporters=html --coverageReporters=cobertura
        continue-on-error: false
        
      - name: Run security vulnerability scan
        id: security
        run: |
          echo "### 🔒 Security Vulnerability Scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run npm audit and capture output
          if npm audit --audit-level=moderate --json > audit-results.json 2>&1; then
            echo "✅ **No vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | 0 |" >> $GITHUB_STEP_SUMMARY
            echo "| High | 0 |" >> $GITHUB_STEP_SUMMARY
            echo "| Moderate | 0 |" >> $GITHUB_STEP_SUMMARY
            echo "| Low | 0 |" >> $GITHUB_STEP_SUMMARY
          else
            # Parse audit results
            CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
            MODERATE=$(jq '.metadata.vulnerabilities.moderate // 0' audit-results.json)
            LOW=$(jq '.metadata.vulnerabilities.low // 0' audit-results.json)
            
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| High | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| Moderate | $MODERATE |" >> $GITHUB_STEP_SUMMARY
            echo "| Low | $LOW |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Check if critical or high severity vulnerabilities exist
            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "❌ **Critical or high severity vulnerabilities detected**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Action Required:** Fix vulnerabilities before merging" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "<details>" >> $GITHUB_STEP_SUMMARY
              echo "<summary>View vulnerability details</summary>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              npm audit --audit-level=moderate >> $GITHUB_STEP_SUMMARY || true
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "</details>" >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "⚠️ **Moderate or low severity vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Consider addressing these vulnerabilities, but they won't block the PR." >> $GITHUB_STEP_SUMMARY
            fi
          fi
        continue-on-error: false
        
      - name: Upload security scan results
        if: always() && steps.security.outcome != 'skipped'
        uses: actions/upload-artifact@v4
        with:
          name: pr-security-scan-${{ github.event.pull_request.number }}
          path: audit-results.json
          retention-days: 30
          if-no-files-found: warn
        
      - name: Validate version
        id: version
        run: |
          echo "### 📦 Version Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run version validation script
          node scripts/validate-version.js origin/${{ github.base_ref }}
        continue-on-error: false
        
      - name: Check coverage threshold
        id: coverage
        if: always() && steps.test.outcome == 'success'
        run: |
          # Extract coverage percentages from coverage-summary.json
          if [ -f "coverage/coverage-summary.json" ]; then
            LINES=$(jq '.total.lines.pct' coverage/coverage-summary.json)
            STATEMENTS=$(jq '.total.statements.pct' coverage/coverage-summary.json)
            FUNCTIONS=$(jq '.total.functions.pct' coverage/coverage-summary.json)
            BRANCHES=$(jq '.total.branches.pct' coverage/coverage-summary.json)
            
            echo "### Code Coverage" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Coverage | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|--------|" >> $GITHUB_STEP_SUMMARY
            
            # Check each metric against 80% threshold
            THRESHOLD=80
            FAILED=0
            
            if (( $(echo "$LINES >= $THRESHOLD" | bc -l) )); then
              echo "| Lines | ${LINES}% | ✅ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Lines | ${LINES}% | ❌ |" >> $GITHUB_STEP_SUMMARY
              FAILED=1
            fi
            
            if (( $(echo "$STATEMENTS >= $THRESHOLD" | bc -l) )); then
              echo "| Statements | ${STATEMENTS}% | ✅ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Statements | ${STATEMENTS}% | ❌ |" >> $GITHUB_STEP_SUMMARY
              FAILED=1
            fi
            
            if (( $(echo "$FUNCTIONS >= $THRESHOLD" | bc -l) )); then
              echo "| Functions | ${FUNCTIONS}% | ✅ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Functions | ${FUNCTIONS}% | ❌ |" >> $GITHUB_STEP_SUMMARY
              FAILED=1
            fi
            
            if (( $(echo "$BRANCHES >= $THRESHOLD" | bc -l) )); then
              echo "| Branches | ${BRANCHES}% | ✅ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Branches | ${BRANCHES}% | ❌ |" >> $GITHUB_STEP_SUMMARY
              FAILED=1
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ $FAILED -eq 1 ]; then
              echo "❌ **Coverage threshold not met** - Minimum 80% required for all metrics" >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "✅ **All coverage thresholds met** - Minimum 80% achieved" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Coverage report not found" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
      - name: Upload test results
        if: always() && steps.test.outcome != 'skipped'
        uses: actions/upload-artifact@v4
        with:
          name: pr-test-results-${{ github.event.pull_request.number }}
          path: |
            coverage/coverage-summary.json
            coverage/cobertura-coverage.xml
            coverage/lcov.info
          retention-days: 30
          if-no-files-found: warn
          
      - name: Upload coverage reports
        if: always() && steps.test.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: pr-coverage-reports-${{ github.event.pull_request.number }}
          path: |
            coverage/
            !coverage/**/*.js
          retention-days: 30
          
      - name: Generate PR quality summary
        if: always()
        run: |
          echo "# 🔍 Pull Request Quality Gates" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR #${{ github.event.pull_request.number }}:** ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.head_ref }}\` → \`${{ github.base_ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Quality Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Compilation status
          if [ "${{ steps.compile.outcome }}" == "success" ]; then
            echo "| TypeScript Compilation | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| TypeScript Compilation | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Linting status
          if [ "${{ steps.lint.outcome }}" == "success" ]; then
            echo "| ESLint | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| ESLint | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test status
          if [ "${{ steps.test.outcome }}" == "success" ]; then
            echo "| Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.test.outcome }}" == "failure" ]; then
            echo "| Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Unit Tests | ⚠️ Skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Security scan status
          if [ "${{ steps.security.outcome }}" == "success" ]; then
            echo "| Security Scan | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.security.outcome }}" == "failure" ]; then
            echo "| Security Scan | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Security Scan | ⚠️ Skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Coverage status
          if [ "${{ steps.coverage.outcome }}" == "success" ]; then
            echo "| Code Coverage (≥80%) | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.coverage.outcome }}" == "failure" ]; then
            echo "| Code Coverage (≥80%) | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Code Coverage (≥80%) | ⚠️ Skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Version validation status
          if [ "${{ steps.version.outcome }}" == "success" ]; then
            echo "| Version Validation | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.version.outcome }}" == "failure" ]; then
            echo "| Version Validation | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Version Validation | ⚠️ Skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ job.status }}" == "success" ]; then
            echo "### ✅ All Quality Gates Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This pull request meets all quality standards and is ready for review." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Quality Gates Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This pull request does not meet quality standards. Please fix the issues above before requesting review." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Note:** Merging is blocked until all quality gates pass." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** [\`${{ github.event.pull_request.head.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.event.pull_request.head.sha }})" >> $GITHUB_STEP_SUMMARY
          
      - name: Post PR status comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            // Build the comment body
            let commentBody = '## 🔍 Pull Request Quality Gates\n\n';
            commentBody += `**PR #${{ github.event.pull_request.number }}:** ${{ github.event.pull_request.title }}\n`;
            commentBody += `**Branch:** \`${{ github.head_ref }}\` → \`${{ github.base_ref }}\`\n`;
            commentBody += `**Author:** @${{ github.event.pull_request.user.login }}\n\n`;
            commentBody += '---\n\n';
            commentBody += '### 📊 Quality Check Results\n\n';
            commentBody += '| Check | Status |\n';
            commentBody += '|-------|--------|\n';
            
            // Compilation status
            const compileStatus = '${{ steps.compile.outcome }}';
            commentBody += `| TypeScript Compilation | ${compileStatus === 'success' ? '✅ Passed' : '❌ Failed'} |\n`;
            
            // Linting status
            const lintStatus = '${{ steps.lint.outcome }}';
            commentBody += `| ESLint | ${lintStatus === 'success' ? '✅ Passed' : '❌ Failed'} |\n`;
            
            // Test status
            const testStatus = '${{ steps.test.outcome }}';
            if (testStatus === 'success') {
              commentBody += '| Unit Tests | ✅ Passed |\n';
            } else if (testStatus === 'failure') {
              commentBody += '| Unit Tests | ❌ Failed |\n';
            } else {
              commentBody += '| Unit Tests | ⚠️ Skipped |\n';
            }
            
            // Security scan status
            const securityStatus = '${{ steps.security.outcome }}';
            if (securityStatus === 'success') {
              commentBody += '| Security Scan | ✅ Passed |\n';
            } else if (securityStatus === 'failure') {
              commentBody += '| Security Scan | ❌ Failed |\n';
            } else {
              commentBody += '| Security Scan | ⚠️ Skipped |\n';
            }
            
            // Coverage status
            const coverageStatus = '${{ steps.coverage.outcome }}';
            if (coverageStatus === 'success') {
              commentBody += '| Code Coverage (≥80%) | ✅ Passed |\n';
            } else if (coverageStatus === 'failure') {
              commentBody += '| Code Coverage (≥80%) | ❌ Failed |\n';
            } else {
              commentBody += '| Code Coverage (≥80%) | ⚠️ Skipped |\n';
            }
            
            // Version validation status
            const versionStatus = '${{ steps.version.outcome }}';
            if (versionStatus === 'success') {
              commentBody += '| Version Validation | ✅ Passed |\n';
            } else if (versionStatus === 'failure') {
              commentBody += '| Version Validation | ❌ Failed |\n';
            } else {
              commentBody += '| Version Validation | ⚠️ Skipped |\n';
            }
            
            commentBody += '\n';
            
            // Overall status
            const jobStatus = '${{ job.status }}';
            if (jobStatus === 'success') {
              commentBody += '### ✅ All Quality Gates Passed\n\n';
              commentBody += 'This pull request meets all quality standards and is ready for review.\n';
            } else {
              commentBody += '### ❌ Quality Gates Failed\n\n';
              commentBody += 'This pull request does not meet quality standards. Please fix the issues above before requesting review.\n\n';
              commentBody += '**Note:** Merging is blocked until all quality gates pass.\n';
            }
            
            commentBody += '\n---\n\n';
            commentBody += `**Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            commentBody += `**Commit:** [\`${{ github.event.pull_request.head.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.event.pull_request.head.sha }})\n`;
            
            // Find existing comment from this workflow
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🔍 Pull Request Quality Gates')
            );
            
            // Update existing comment or create new one
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
      
      - name: Send failure notification
        if: failure()
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          
          echo "📢 Sending PR quality gates failure notification..."
          echo ""
          echo "❌ PR Quality Gates Failed!"
          echo "PR: #$PR_NUMBER - $PR_TITLE"
          echo "Author: @$PR_AUTHOR"
          echo "Branch: ${{ github.head_ref }} → ${{ github.base_ref }}"
          echo "Commit: ${{ github.event.pull_request.head.sha }}"
          echo "Workflow: $WORKFLOW_URL"
          echo "PR URL: $PR_URL"
          echo ""
          echo "The pull request does not meet quality standards."
          echo ""
          echo "Common failure reasons:"
          echo "1. TypeScript compilation errors"
          echo "2. ESLint violations"
          echo "3. Test failures"
          echo "4. Code coverage below 80% threshold"
          echo "5. Security vulnerabilities (critical or high severity)"
          echo "6. Invalid version format in package.json"
          echo ""
          echo "Next steps:"
          echo "1. Review the failed quality checks in the PR comment"
          echo "2. Fix the issues locally and test before pushing"
          echo "3. Push the fixes to update the PR"
          echo "4. Wait for quality gates to pass before requesting review"
          echo ""
          echo "Note: Merging is blocked until all quality gates pass."
