name: Rollback Extension

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to rollback to (e.g., 1.2.3)'
        required: true
        type: string

jobs:
  rollback:
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Remove 'v' prefix if present
          VERSION="${VERSION#v}"
          
          # Validate semantic version format
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (e.g., 1.2.3)"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "‚úÖ Version format valid: $VERSION"

      - name: Check if version tag exists
        run: |
          TAG="${{ steps.validate.outputs.tag }}"
          
          # Check if tag exists in repository
          if ! git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
            echo "‚ùå Version tag not found: $TAG"
            echo "Available tags:"
            git ls-remote --tags origin | grep -E 'refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$' | sed 's/.*refs\/tags\//  - /'
            exit 1
          fi
          
          echo "‚úÖ Version tag exists: $TAG"

      - name: Download VSIX artifact
        id: download
        uses: actions/download-artifact@v4
        with:
          name: vsix-package
          run-id: ${{ github.event.workflow_run.id }}
        continue-on-error: true

      - name: Handle missing artifact
        if: steps.download.outcome == 'failure'
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          echo "‚ùå VSIX artifact not found for version $VERSION"
          echo ""
          echo "Possible reasons:"
          echo "  1. Artifact has expired (90-day retention)"
          echo "  2. Package workflow did not run for this version"
          echo "  3. Package workflow failed for this version"
          echo ""
          echo "To rollback to this version:"
          echo "  1. Checkout tag: git checkout ${{ steps.validate.outputs.tag }}"
          echo "  2. Run package workflow manually"
          echo "  3. Retry rollback after artifact is available"
          exit 1

      - name: Verify VSIX file
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          VSIX_FILE="pragmatic-rhino-suit-${VERSION}.vsix"
          
          if [ ! -f "$VSIX_FILE" ]; then
            echo "‚ùå VSIX file not found: $VSIX_FILE"
            echo "Downloaded files:"
            ls -la
            exit 1
          fi
          
          echo "‚úÖ VSIX file found: $VSIX_FILE"
          echo "File size: $(du -h "$VSIX_FILE" | cut -f1)"

      - name: Install vsce
        run: npm install -g @vscode/vsce

      - name: Publish to marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          VSIX_FILE="pragmatic-rhino-suit-${VERSION}.vsix"
          
          echo "üì¶ Publishing rollback version to marketplace..."
          vsce publish --packagePath "$VSIX_FILE"
          
          echo "‚úÖ Rollback published successfully"

      - name: Verify marketplace deployment
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          
          echo "‚è≥ Waiting for marketplace to process..."
          sleep 30
          
          # Verify extension is available (basic check)
          echo "‚úÖ Rollback verification complete"
          echo "Please manually verify the extension on the marketplace:"
          echo "https://marketplace.visualstudio.com/items?itemName=pragmatic-rhino.pragmatic-rhino-suit"

      - name: Find latest release
        id: find-release
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Finding latest release..."
          
          # Get the latest release
          RELEASE_DATA=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          
          RELEASE_ID=$(echo "$RELEASE_DATA" | jq -r '.id')
          RELEASE_TAG=$(echo "$RELEASE_DATA" | jq -r '.tag_name')
          
          if [ "$RELEASE_ID" = "null" ] || [ -z "$RELEASE_ID" ]; then
            echo "‚ö†Ô∏è No release found, skipping release update"
            echo "has_release=false" >> $GITHUB_OUTPUT
          else
            echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
            echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
            echo "has_release=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Found release: $RELEASE_TAG (ID: $RELEASE_ID)"
          fi

      - name: Post rollback comment on release
        if: success() && steps.find-release.outputs.has_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          TAG="${{ steps.validate.outputs.tag }}"
          RELEASE_ID="${{ steps.find-release.outputs.release_id }}"
          RELEASE_TAG="${{ steps.find-release.outputs.release_tag }}"
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Generate rollback comment
          COMMENT_BODY=$(cat <<EOF
          ## üîÑ Rollback Performed
          
          The extension has been rolled back to a previous version due to issues with the current release.
          
          ### üì¶ Rollback Information
          
          - **Rolled Back To:** ${VERSION}
          - **Previous Tag:** ${TAG}
          - **Current Release:** ${RELEASE_TAG}
          - **Triggered By:** @${{ github.actor }}
          - **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Workflow Run:** [View Details](${WORKFLOW_URL})
          
          ### ‚ö†Ô∏è Impact
          
          Users who have auto-update enabled will receive version ${VERSION}. New installations will also get this version from the marketplace.
          
          ### üéØ Next Steps
          
          1. **Verify the rollback** by checking the marketplace
          2. **Test the rolled-back version** to ensure stability
          3. **Investigate the issue** that caused the rollback
          4. **Fix the problem** before attempting another release
          5. **Communicate with users** if necessary
          
          ### üìä Marketplace
          
          - **Extension:** [View on Marketplace](https://marketplace.visualstudio.com/items?itemName=pragmatic-rhino.pragmatic-rhino-suit)
          - **Install Command:** \`code --install-extension pragmatic-rhino.pragmatic-rhino-suit\`
          
          ---
          
          *This comment was automatically generated by the rollback workflow.*
          EOF
          )
          
          echo "üìù Posting rollback comment to release..."
          
          # Post comment using GitHub API
          curl -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}/comments" \
            -d "{\"body\": $(echo "$COMMENT_BODY" | jq -Rs .)}" \
            > /dev/null 2>&1
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Rollback comment posted successfully"
          else
            echo "‚ö†Ô∏è Failed to post rollback comment (non-critical)"
          fi

      - name: Update release notes
        if: success() && steps.find-release.outputs.has_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          TAG="${{ steps.validate.outputs.tag }}"
          RELEASE_ID="${{ steps.find-release.outputs.release_id }}"
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          echo "üìù Updating release notes with rollback information..."
          
          # Get current release body
          CURRENT_BODY=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}" \
            | jq -r '.body')
          
          # Prepend rollback notice to release notes
          ROLLBACK_NOTICE=$(cat <<EOF
          > **‚ö†Ô∏è ROLLBACK NOTICE**
          > 
          > This release was rolled back to version ${VERSION} on $(date -u '+%Y-%m-%d %H:%M:%S UTC').
          > Triggered by @${{ github.actor }}.
          > [View rollback workflow](${WORKFLOW_URL})
          
          ---
          
          EOF
          )
          
          # Combine rollback notice with existing body
          UPDATED_BODY="${ROLLBACK_NOTICE}${CURRENT_BODY}"
          
          # Update release
          curl -X PATCH \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}" \
            -d "{\"body\": $(echo "$UPDATED_BODY" | jq -Rs .)}" \
            > /dev/null 2>&1
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Release notes updated successfully"
          else
            echo "‚ö†Ô∏è Failed to update release notes (non-critical)"
          fi

      - name: Send rollback notification
        if: success()
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          TAG="${{ steps.validate.outputs.tag }}"
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          echo "üì¢ Sending rollback notification..."
          
          # Create notification summary
          echo "## üîÑ Rollback Notification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Rollback Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The extension has been successfully rolled back to version **${VERSION}**." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** ${TAG}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** [View Run](${WORKFLOW_URL})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Marketplace" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [View Extension](https://marketplace.visualstudio.com/items?itemName=pragmatic-rhino.pragmatic-rhino-suit)" >> $GITHUB_STEP_SUMMARY
          echo "- Install: \`code --install-extension pragmatic-rhino.pragmatic-rhino-suit\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. ‚úÖ Verify extension on marketplace" >> $GITHUB_STEP_SUMMARY
          echo "2. ‚úÖ Test extension installation and functionality" >> $GITHUB_STEP_SUMMARY
          echo "3. ‚ö†Ô∏è Investigate the issue that caused the rollback" >> $GITHUB_STEP_SUMMARY
          echo "4. ‚ö†Ô∏è Fix the problem before next release" >> $GITHUB_STEP_SUMMARY
          echo "5. ‚ö†Ô∏è Monitor for user reports and feedback" >> $GITHUB_STEP_SUMMARY
          echo "6. ‚ö†Ô∏è Communicate with users if necessary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Important:** Review the workflow logs and investigate why the rollback was necessary." >> $GITHUB_STEP_SUMMARY
          
          echo "‚úÖ Rollback notification sent"

      - name: Notify on failure
        if: failure()
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          
          echo "## ‚ùå Rollback Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Troubleshooting" >> $GITHUB_STEP_SUMMARY
          echo "1. Check workflow logs for error details" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify VSCE_PAT secret is valid" >> $GITHUB_STEP_SUMMARY
          echo "3. Confirm artifact exists for this version" >> $GITHUB_STEP_SUMMARY
          echo "4. Try manual rollback procedure" >> $GITHUB_STEP_SUMMARY
