const fs = require('fs');
const path = require('path');

const workspaceRoot = path.join(__dirname, 'workspace-50-frameworks');
const steeringDir = path.join(workspaceRoot, '.kiro', 'steering');
const metadataDir = path.join(workspaceRoot, '.kiro', '.metadata');

// Create directory structure
if (!fs.existsSync(workspaceRoot)) {
  fs.mkdirSync(workspaceRoot, { recursive: true });
}
if (!fs.existsSync(steeringDir)) {
  fs.mkdirSync(steeringDir, { recursive: true });
}
if (!fs.existsSync(metadataDir)) {
  fs.mkdirSync(metadataDir, { recursive: true });
}

// Generate 50 steering documents
const metadata = {
  frameworks: []
};

for (let i = 0; i < 50; i++) {
  const frameworkId = `framework-${i + 1}`;
  const fileName = `strategy-framework-${i + 1}.md`;
  const filePath = path.join(steeringDir, fileName);
  
  const installedDate = new Date(2025, 0, 1 + i);
  const isCustomized = i % 5 === 0;
  const customizedDate = isCustomized ? new Date(2025, 0, 15 + i) : undefined;
  
  // Create steering document
  const content = `# Framework ${i + 1} Strategy Guide

## Purpose

This is test framework ${i + 1} for workspace fixture testing. It provides guidance on implementing features using Framework ${i + 1} best practices.

${isCustomized ? '**NOTE: This document has been customized by the team.**\n' : ''}

## Key Concepts

### Concept 1: Core Principle

Framework ${i + 1} emphasizes the following core principle: Always follow best practices and maintain code quality.

**Example:**
\`\`\`typescript
function example${i}() {
  // Implementation for framework ${i + 1}
  return {
    id: ${i + 1},
    name: 'Framework ${i + 1}',
    version: '1.${Math.floor(i / 10)}.${i % 10}'
  };
}
\`\`\`

### Concept 2: Implementation Pattern

Use the following pattern when implementing features with Framework ${i + 1}:

1. Define requirements
2. Design solution
3. Implement with tests
4. Deploy and monitor

## Best Practices

1. **Practice 1**: Always validate inputs
2. **Practice 2**: Use dependency injection
3. **Practice 3**: Write comprehensive tests
4. **Practice 4**: Document your code
5. **Practice 5**: Follow naming conventions

## Anti-Patterns

### Anti-Pattern 1: Skipping Tests

Don't skip writing tests. Tests are essential for maintaining code quality.

### Anti-Pattern 2: Hardcoding Values

Avoid hardcoding configuration values. Use configuration files or environment variables.

## Summary

Framework ${i + 1} provides a structured approach to software development. Follow the key concepts and best practices outlined in this document to ensure high-quality implementations.

${isCustomized ? '\n**CUSTOMIZATION HISTORY:**\n- 2025-01-' + (15 + i) + ': Team customizations applied\n' : ''}
`;

  fs.writeFileSync(filePath, content);
  
  // Add to metadata
  const frameworkMetadata = {
    id: frameworkId,
    version: `1.${Math.floor(i / 10)}.${i % 10}`,
    installedAt: installedDate.toISOString(),
    customized: isCustomized
  };
  
  if (isCustomized) {
    frameworkMetadata.customizedAt = customizedDate.toISOString();
  }
  
  metadata.frameworks.push(frameworkMetadata);
}

// Write metadata file
const metadataPath = path.join(metadataDir, 'installed-frameworks.json');
fs.writeFileSync(metadataPath, JSON.stringify(metadata, null, 2));

// Create README for the workspace
const readmePath = path.join(workspaceRoot, 'README.md');
const readmeContent = `# Test Workspace with 50 Installed Frameworks

This is a test workspace fixture containing 50 installed framework steering documents.

## Structure

\`\`\`
workspace-50-frameworks/
├── .kiro/
│   ├── steering/
│   │   ├── strategy-framework-1.md
│   │   ├── strategy-framework-2.md
│   │   ├── ...
│   │   └── strategy-framework-50.md
│   └── .metadata/
│       └── installed-frameworks.json
└── README.md
\`\`\`

## Usage

This fixture is used for:
- Performance testing with many installed frameworks
- Tree view rendering tests
- Bulk operation tests
- Memory usage tests

## Statistics

- Total frameworks: 50
- Customized frameworks: ${metadata.frameworks.filter(f => f.customized).length}
- Non-customized frameworks: ${metadata.frameworks.filter(f => !f.customized).length}

## Generated

This workspace was generated by \`generateWorkspace50.js\` on ${new Date().toISOString()}.
`;

fs.writeFileSync(readmePath, readmeContent);

console.log(`Generated workspace with 50 installed frameworks`);
console.log(`Location: ${workspaceRoot}`);
console.log(`Steering documents: ${fs.readdirSync(steeringDir).length}`);
console.log(`Customized frameworks: ${metadata.frameworks.filter(f => f.customized).length}`);
